name: Build and Release

on:
  push:
    tags:
      - 'v*' # Run workflow on version tags, e.g., v1.0.0
    paths-ignore:
      - version.json

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      version: ${{ steps.release.outputs.version }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          release-type: simple

  build-windows:
    needs: release-please
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Show release version
        run: echo "Building version ${{ needs.release-please.outputs.version }}"
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          
      - name: Build with PyInstaller
        run: |
          pyinstaller --name "OnTime Meeting Timer" --windowed --icon=assets/icons/app-icon.ico --noconfirm --onedir --clean main.py --add-data "assets;assets" --add-data "resources;resources" --collect-data src

      - name: Download and Install Inno Setup
        run: |
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "is.exe"
          Start-Process -FilePath "is.exe" -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-" -Wait

      - name: Verify Inno Setup installation
        run: if (!(Test-Path "C:\Program Files (x86)\Inno Setup 6\ISCC.exe")) { Write-Error "ISCC.exe not found!" }

      - name: Create Inno Setup script
        run: |
          $version = "${{ needs.release-please.outputs.version }}"
          $iss = @"
          #define MyAppName "OnTime Meeting Timer"
          #define MyAppVersion "$version"
          #define MyAppPublisher "Your Name"
          #define MyAppURL "https://github.com/berb-q/meeting_timer"
          #define MyAppExeName "OnTime Meeting Timer.exe"

          [Setup]
          AppId={{F9A6E8D8-3B2F-4A8A-B5D1-57A7F2E7BAC7}
          AppName={#MyAppName}
          AppVersion={#MyAppVersion}
          AppPublisher={#MyAppPublisher}
          AppPublisherURL={#MyAppURL}
          AppSupportURL={#MyAppURL}
          AppUpdatesURL={#MyAppURL}
          DefaultDirName={autopf}\{#MyAppName}
          DisableProgramGroupPage=yes
          OutputDir=.
          OutputBaseFilename=OnTimeMeetingTimer-{#MyAppVersion}-setup
          Compression=lzma
          SolidCompression=yes
          WizardStyle=modern

          [Languages]
          Name: "english"; MessagesFile: "compiler:Default.isl"

          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
          Name: "startupitem"; Description: "Run at system startup"; GroupDescription: "Startup Options"

          [Files]
          Source: "dist\OnTime Meeting Timer\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

          [Icons]
          Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
          Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
          Name: "{userstartup}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: startupitem

          [Run]
          Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
          "@
          Set-Content -Path setup.iss -Value $iss
        
      - name: Build installer
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" setup.iss

      - name: Generate SHA256 for Windows installer
        run: |
          sha256sum OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}-setup.exe > windows.sha256

      - name: Upload SHA256 artifact (Windows)
        uses: actions/upload-artifact@v3
        with:
          name: windows-sha
          path: windows.sha256
        
      - name: Upload installer to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release-please.outputs.upload_url }}
          asset_path: ./OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}-setup.exe
          asset_name: OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}-setup.exe
          asset_content_type: application/octet-stream

  build-macos:
    needs: release-please
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Show release version
        run: echo "Building version ${{ needs.release-please.outputs.version }}"
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller dmgbuild
          
      - name: Build with PyInstaller
        run: |
          pyinstaller --name "OnTime Meeting Timer" --windowed --icon=assets/icons/app-icon.icns --noconfirm --onedir --clean main.py --add-data "assets:assets" --add-data "resources:resources" --collect-data src
      
      - name: Create DMG settings file
        run: |
          echo 'app = defines.get("app", "dist/OnTime Meeting Timer.app")' > dmg_settings.py
          echo 'appname = defines.get("appname", "OnTime Meeting Timer")' >> dmg_settings.py
          echo 'background = "assets/dmg_background.png"' >> dmg_settings.py
          echo 'volume_name = "OnTime Meeting Timer"' >> dmg_settings.py
          echo 'window_rect = ((100, 100), (640, 400))' >> dmg_settings.py
          echo 'icon_size = 128' >> dmg_settings.py
          echo 'text_size = 12' >> dmg_settings.py
          echo 'icon_locations = {' >> dmg_settings.py
          echo '    appname: (140, 120),' >> dmg_settings.py
          echo '    "Applications": (500, 120),' >> dmg_settings.py
          echo '}' >> dmg_settings.py
          echo 'files = [app]' >> dmg_settings.py
          echo 'symlinks = {"Applications": "/Applications"}' >> dmg_settings.py
      
      - name: Build DMG
        run: |
          dmgbuild -s dmg_settings.py "OnTime Meeting Timer" "OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.dmg"

      - name: Generate SHA256 for DMG
        run: |
          sha256sum OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.dmg > macos.sha256

      - name: Upload SHA256 artifact (macOS)
        uses: actions/upload-artifact@v3
        with:
          name: macos-sha
          path: macos.sha256
        
      - name: Upload DMG to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release-please.outputs.upload_url }}
          asset_path: ./OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.dmg
          asset_name: OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.dmg
          asset_content_type: application/octet-stream

  build-linux:
    needs: release-please
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Show release version
        run: echo "Building version ${{ needs.release-please.outputs.version }}"
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-0 libnotify4 libdbus-1-3 libxss1 libnss3 libgdk-pixbuf2.0-0
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          
      - name: Build with PyInstaller
        run: |
          pyinstaller --name "ontime" --windowed --icon=assets/icons/app-icon.png --noconfirm --onedir --clean main.py --add-data "assets:assets" --add-data "resources:resources" --collect-data src
      
      - name: Create .desktop file
        run: |
          echo "[Desktop Entry]" > ontime.desktop
          echo "Name=OnTime Meeting Timer" >> ontime.desktop
          echo "Comment=Timer application for managing meeting schedules" >> ontime.desktop
          echo "Exec=ontime" >> ontime.desktop
          echo "Icon=ontime" >> ontime.desktop
          echo "Terminal=false" >> ontime.desktop
          echo "Type=Application" >> ontime.desktop
          echo "Categories=Utility;" >> ontime.desktop
      
      - name: Download AppImage tools
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
      
      - name: Prepare AppDir
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          cp -r dist/ontime/* AppDir/usr/bin/
          cp ontime.desktop AppDir/usr/share/applications/
          cp assets/icons/app-icon.png AppDir/usr/share/icons/hicolor/256x256/apps/ontime.png
          
          ln -s usr/share/applications/ontime.desktop AppDir/ontime.desktop
          ln -s usr/share/icons/hicolor/256x256/apps/ontime.png AppDir/ontime.png
          
          # Create AppRun script
          echo '#!/bin/bash' > AppDir/AppRun
          echo 'SELF=$(readlink -f "$0")' >> AppDir/AppRun
          echo 'HERE=${SELF%/*}' >> AppDir/AppRun
          echo 'export PATH="${HERE}/usr/bin:${PATH}"' >> AppDir/AppRun
          echo 'exec "${HERE}/usr/bin/ontime" "$@"' >> AppDir/AppRun
          chmod +x AppDir/AppRun
      
      - name: Install libfuse2
        run: sudo apt-get update && sudo apt-get install -y libfuse2

      - name: Build AppImage
        run: |
          VERSION=${{ needs.release-please.outputs.version }} ./appimagetool-x86_64.AppImage AppDir OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.AppImage

      - name: Generate SHA256 for AppImage
        run: |
          sha256sum OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.AppImage > linux.sha256

      - name: Upload SHA256 artifact (Linux)
        uses: actions/upload-artifact@v3
        with:
          name: linux-sha
          path: linux.sha256
        
      - name: Upload AppImage to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release-please.outputs.upload_url }}
          asset_path: ./OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.AppImage
          asset_name: OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.AppImage
          asset_content_type: application/octet-stream

  update-version-json:
    needs: [release-please, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download SHA256 artifacts
        uses: actions/download-artifact@v3
        with:
          path: sha256

      - name: Read SHA values
        id: sha
        run: |
          WIN_SHA=$(cut -d ' ' -f1 sha256/windows-sha/windows.sha256)
          MAC_SHA=$(cut -d ' ' -f1 sha256/macos-sha/macos.sha256)
          LINUX_SHA=$(cut -d ' ' -f1 sha256/linux-sha/linux.sha256)
          echo "win_sha=$WIN_SHA" >> $GITHUB_OUTPUT
          echo "mac_sha=$MAC_SHA" >> $GITHUB_OUTPUT
          echo "linux_sha=$LINUX_SHA" >> $GITHUB_OUTPUT
      
      - name: Generate version.json
        run: |
          VERSION=${{ needs.release-please.outputs.version }}
          TODAY=$(date +"%Y-%m-%d")
          REPO="${GITHUB_REPOSITORY}"
          RELEASE_NOTES="${{ needs.release-please.outputs.release_notes }}"
          
          cat > version.json << EOF
          {
            "version": "${VERSION}",
            "releaseDate": "${TODAY}",
            "downloadUrl": {
              "windows": "https://github.com/${REPO}/releases/download/v${VERSION}/OnTimeMeetingTimer-${VERSION}-setup.exe",
              "macos": "https://github.com/${REPO}/releases/download/v${VERSION}/OnTimeMeetingTimer-${VERSION}.dmg",
              "linux": "https://github.com/${REPO}/releases/download/v${VERSION}/OnTimeMeetingTimer-${VERSION}.AppImage"
            },
            "releaseNotes": ${RELEASE_NOTES@Q},
            "sha256": {
              "windows": "${{ steps.sha.outputs.win_sha }}",
              "macos": "${{ steps.sha.outputs.mac_sha }}",
              "linux": "${{ steps.sha.outputs.linux_sha }}"
            }
          }
          EOF
          
          cat version.json
      
      - name: Commit and push version.json
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add version.json
          git commit -m "Update version.json to ${{ needs.release-please.outputs.version }}" || echo "No changes to commit"
          git push origin main
