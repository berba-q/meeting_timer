name: Build and Release

on:
  push:
    tags:
      - 'v*' # Run workflow on version tags, e.g., v1.0.0
      - 'timerV*'

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      version: ${{ steps.extract_version.outputs.version || github.ref_name }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_notes: ${{ steps.save_notes.outputs.release_notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get full history for conventional commits
      
      - name: Extract version from tag
        id: extract_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          # Remove 'v' or 'timerV' prefix to get clean version
          VERSION=${TAG_NAME#v}
          VERSION=${VERSION#timerV}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Step 1: Generate complete CHANGELOG.md from all history
      - name: Generate comprehensive CHANGELOG.md
        run: |
          # Create a fresh CHANGELOG.md with a title
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Generate full changelog from all commit history
          echo "Generating complete changelog from all conventional commits..."
          npx --yes conventional-changelog-cli -p angular -r 0 >> CHANGELOG.md
          
          # Check if we generated meaningful content
          if [ $(wc -l < CHANGELOG.md) -lt 5 ]; then
            echo "Insufficient conventional commit history found - enriching with regular commits"
            echo "## Commit History" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Get all tags in chronological order
            TAGS=$(git tag --sort=committerdate)
            
            if [ -n "$TAGS" ]; then
              # If we have tags, group commits by tag
              PREV_TAG=""
              for TAG in $TAGS; do
                echo "### $TAG" >> CHANGELOG.md
                echo "" >> CHANGELOG.md
                
                if [ -n "$PREV_TAG" ]; then
                  git log $PREV_TAG..$TAG --pretty=format:"* %s" >> CHANGELOG.md
                else
                  # For the first tag, get all commits up to that tag
                  git log $TAG --pretty=format:"* %s" >> CHANGELOG.md
                fi
                
                echo "" >> CHANGELOG.md
                echo "" >> CHANGELOG.md
                PREV_TAG=$TAG
              done
              
              # Newest commits (after the last tag)
              echo "### Unreleased changes" >> CHANGELOG.md
              echo "" >> CHANGELOG.md
              git log $PREV_TAG..HEAD --pretty=format:"* %s" >> CHANGELOG.md
              echo "" >> CHANGELOG.md
            else
              # If no tags, just list all commits
              git log --pretty=format:"* %s" >> CHANGELOG.md
            fi
          fi
          
          # Display the generated changelog for debugging
          echo "Generated CHANGELOG.md (first 20 lines):"
          head -n 20 CHANGELOG.md

      # Step 2: Generate release notes for the current release
      - name: Generate Release Notes for GitHub Release
        run: |
          # Generate release notes for current version
          echo "# Release ${{ env.TAG_NAME }} ($(date '+%Y-%m-%d'))" > release_notes.md
          echo "" >> release_notes.md
          
          # Try to generate notes just for the current release
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "Found previous tag: $PREV_TAG - generating notes since then"
            npx --yes conventional-changelog-cli -p angular -o release_notes_temp.md
            
            if [ -s release_notes_temp.md ]; then
              cat release_notes_temp.md >> release_notes.md
            else
              echo "## Changes since $PREV_TAG:" >> release_notes.md
              echo "" >> release_notes.md
              git log $PREV_TAG..HEAD --pretty=format:"* %s" >> release_notes.md
            fi
          else
            # No previous tag found, use recent commits
            echo "## Changes in this release:" >> release_notes.md
            echo "" >> release_notes.md
            git log -n 20 --pretty=format:"* %s" >> release_notes.md
          fi
          
          # Display the release notes for debugging
          echo "Generated release notes:"
          cat release_notes.md

      # Step 3: Commit the new CHANGELOG.md to the repository
      - name: Commit updated CHANGELOG.md
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG.md for release ${{ env.TAG_NAME }}" || echo "No changes to commit"
          git push origin HEAD:main || echo "Failed to push changes"

      - name: Save Release Notes
        id: save_notes
        run: |
          # Read the release notes and prepare for output
          NOTES=$(cat release_notes.md)
          # Use jq to properly escape the content for JSON
          NOTES_ESCAPED=$(echo "$NOTES" | jq -Rs .)
          echo "release_notes=$NOTES_ESCAPED" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false
      
      - name: Set outputs
        id: release
        run: |
          echo "release_created=true" >> $GITHUB_OUTPUT
          echo "version=${{ steps.extract_version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
          # Correctly write multiline release notes output
          printf "release_notes<<EOF\n%s\nEOF\n" "${{ steps.save_notes.outputs.release_notes }}" >> $GITHUB_OUTPUT

      - name: Debug release outputs
        run: |
          echo "Release created: ${{ steps.release.outputs.release_created }}"
          echo "Version: ${{ steps.release.outputs.version }}"
          echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"
          
  build-windows:
    needs: release-please
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Show release version
        run: echo "Building version ${{ needs.release-please.outputs.version }}"
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Generate meeting cache
        run: python -c "from src.utils.scraper import MeetingScraper; MeetingScraper().update_meetings()"

      - name: Copy cache for build
        run: |
          mkdir -p src/prebuilt_cache
          if (Test-Path "$env:USERPROFILE\.cache\MeetingTimer") {
            Copy-Item "$env:USERPROFILE\.cache\MeetingTimer\*" "src\prebuilt_cache\" -Recurse -Force
          }
          
      - name: Build with PyInstaller
        run: |
          pyinstaller --name "OnTime Meeting Timer" --windowed --icon=assets/icons/app-icon.ico --noconfirm --onedir --clean main.py --add-data "assets;assets" --add-data "resources;resources" --collect-data src

      - name: Download and Install Inno Setup
        run: |
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "is.exe"
          Start-Process -FilePath "is.exe" -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-" -Wait

      - name: Verify Inno Setup installation
        run: if (!(Test-Path "C:\Program Files (x86)\Inno Setup 6\ISCC.exe")) { Write-Error "ISCC.exe not found!" }

      - name: Create Inno Setup script
        run: |
          $version = "${{ needs.release-please.outputs.version }}"
          $iss = @"
          #define MyAppName "OnTime Meeting Timer"

          #define MyAppVersion "$version"
          #define MyAppPublisher "Your Name"
          #define MyAppURL "https://github.com/berba-q/meeting_timer"
          #define MyAppExeName "OnTime Meeting Timer.exe"


          [Setup]
          AppId={{F9A6E8D8-3B2F-4A8A-B5D1-57A7F2E7BAC7}
          AppName={#MyAppName}
          AppVersion={#MyAppVersion}
          AppPublisher={#MyAppPublisher}
          AppPublisherURL={#MyAppURL}
          AppSupportURL={#MyAppURL}
          AppUpdatesURL={#MyAppURL}
          DefaultDirName={autopf}\{#MyAppName}
          DisableProgramGroupPage=yes
          OutputDir=.
          OutputBaseFilename=OnTimeMeetingTimer-{#MyAppVersion}-setup

          Compression=lzma
          SolidCompression=yes
          WizardStyle=modern

          [Languages]
          Name: "english"; MessagesFile: "compiler:Default.isl"

          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
          Name: "startupitem"; Description: "Run at system startup"; GroupDescription: "Startup Options"

          [Files]
          Source: "dist\OnTime Meeting Timer\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

          [Icons]
          Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
          Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
          Name: "{userstartup}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: startupitem

          [Run]
          Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
          "@
          Set-Content -Path setup.iss -Value $iss
        
      - name: Build installer
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" setup.iss

      - name: Generate SHA256 for Windows installer
        run: |
          sha256sum OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}-setup.exe > windows.sha256

      - name: Upload SHA256 artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: windows-sha
          path: windows.sha256
        
      - name: Upload installer to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release-please.outputs.upload_url }}
          asset_path: ./OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}-setup.exe
          asset_name: OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}-setup.exe
          asset_content_type: application/octet-stream

  build-macos:
    needs: release-please
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Show release version
        run: echo "Building version ${{ needs.release-please.outputs.version }}"
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller dmgbuild

      - name: Generate meeting cache
        run: python -c "from src.utils.scraper import MeetingScraper; MeetingScraper().update_meetings()"

      - name: Copy cache for build
        run: |
          mkdir -p src/prebuilt_cache
          cp -r ~/.cache/MeetingTimer/* src/prebuilt_cache/ || true
          
      - name: Build with PyInstaller
        run: |
        
          pyinstaller --name "OnTime Meeting Timer" --windowed --icon=assets/icons/app-icon.icns --noconfirm --onedir --clean main.py --add-data "assets:assets" --add-data "resources:resources" --collect-data src

      
      - name: Create DMG settings file
        run: |
          echo 'app = defines.get("app", "dist/OnTime Meeting Timer.app")' > dmg_settings.py
          echo 'appname = defines.get("appname", "OnTime Meeting Timer")' >> dmg_settings.py
          echo 'background = None' >> dmg_settings.py
          echo 'background_color = "#f0f0f0"' >> dmg_settings.py
          echo 'volume_name = "OnTime Meeting Timer"' >> dmg_settings.py
          echo 'window_rect = ((100, 100), (640, 400))' >> dmg_settings.py
          echo 'icon_size = 128' >> dmg_settings.py
          echo 'text_size = 12' >> dmg_settings.py
          echo 'icon_locations = {' >> dmg_settings.py
          echo '    appname: (140, 120),' >> dmg_settings.py
          echo '    "Applications": (500, 120),' >> dmg_settings.py
          echo '}' >> dmg_settings.py
          echo 'files = [app]' >> dmg_settings.py
          echo 'symlinks = {"Applications": "/Applications"}' >> dmg_settings.py
      
      - name: Build DMG
        run: |
          dmgbuild -s dmg_settings.py "OnTime Meeting Timer" "OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.dmg"

      - name: Generate SHA256 for DMG
        run: |
          shasum -a 256 OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.dmg > macos.sha256

      - name: Upload SHA256 artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: macos-sha
          path: macos.sha256

        
      - name: Upload DMG to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:

          upload_url: ${{ needs.release-please.outputs.upload_url }}
          asset_path: ./OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.dmg
          asset_name: OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.dmg

          asset_content_type: application/octet-stream

  build-linux:
    needs: release-please
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Show release version
        run: echo "Building version ${{ needs.release-please.outputs.version }}"
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-0 libnotify4 libdbus-1-3 libxss1 libnss3 libgdk-pixbuf2.0-0
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Generate meeting cache
        run: python -c "from src.utils.scraper import MeetingScraper; MeetingScraper().update_meetings()"

      - name: Copy cache for build
        run: |
          mkdir -p src/prebuilt_cache
          cp -r ~/.cache/MeetingTimer/* src/prebuilt_cache/ || true
          
      - name: Build with PyInstaller
        run: |
          pyinstaller --name "ontime" --windowed --icon=assets/icons/app-icon.png --noconfirm --onedir --clean main.py --add-data "assets:assets" --add-data "resources:resources" --collect-data src
      
      - name: Create .desktop file
        run: |
          echo "[Desktop Entry]" > ontime.desktop
          echo "Name=OnTime Meeting Timer" >> ontime.desktop
          echo "Comment=Timer application for managing meeting schedules" >> ontime.desktop
          echo "Exec=ontime" >> ontime.desktop
          echo "Icon=ontime" >> ontime.desktop
          echo "Terminal=false" >> ontime.desktop
          echo "Type=Application" >> ontime.desktop
          echo "Categories=Utility;" >> ontime.desktop
      
      - name: Download AppImage tool
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
      
      - name: Prepare AppDir
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          mkdir -p AppDir/usr/share/metainfo
          
          cp -r dist/ontime/* AppDir/usr/bin/
          cp ontime.desktop AppDir/usr/share/applications/
          cp assets/icons/app-icon.png AppDir/usr/share/icons/hicolor/256x256/apps/ontime.png
          
          ln -s usr/share/applications/ontime.desktop AppDir/ontime.desktop
          ln -s usr/share/icons/hicolor/256x256/apps/ontime.png AppDir/ontime.png
          
          # Create AppRun script
          echo '#!/bin/bash' > AppDir/AppRun
          echo 'SELF=$(readlink -f "$0")' >> AppDir/AppRun
          echo 'HERE=${SELF%/*}' >> AppDir/AppRun
          echo 'export PATH="${HERE}/usr/bin:${PATH}"' >> AppDir/AppRun
          echo 'exec "${HERE}/usr/bin/ontime" "$@"' >> AppDir/AppRun
          chmod +x AppDir/AppRun
          
          # Create proper AppStream metadata file
          cat > AppDir/usr/share/metainfo/com.berba-q.ontime.appdata.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <component type="desktop-application">
            <id>com.berba-q.ontime</id>
            <name>OnTime Meeting Timer</name>
            <summary>Timer application for managing meeting schedules</summary>
            <metadata_license>MIT</metadata_license>
            <project_license>MIT</project_license>
            <description>
              <p>OnTime Meeting Timer is a comprehensive application designed to help you manage meeting schedules efficiently. It provides timing features and notifications to keep your meetings on track.</p>
              <p>Features include:</p>
              <ul>
                <li>Meeting countdown timer</li>
                <li>Visual alerts for time management</li>
                <li>Integration with calendar systems</li>
                <li>Customizable timer settings</li>
              </ul>
            </description>
            <launchable type="desktop-id">ontime.desktop</launchable>
            <screenshots>
              <screenshot type="default">
                <caption>The main timer interface</caption>
                <image>https://github.com/berba-q/meeting_timer/raw/main/screenshots/main.png</image>
              </screenshot>
            </screenshots>
            <url type="homepage">https://github.com/berba-q/meeting_timer</url>
            <developer_name>Griffiths</developer_name>
            <content_rating type="oars-1.1" />
            <releases>
              <release version="${{ needs.release-please.outputs.version }}" date="$(date +%Y-%m-%d)">
                <description>
                  <p>Latest release with bug fixes and improvements.</p>
                </description>
              </release>
            </releases>
          </component>
          EOF

          # Make sure the desktop file has the correct ID
          sed -i 's/^Name=OnTime Meeting Timer/Name=OnTime Meeting Timer\nX-AppImage-Name=OnTime Meeting Timer/' AppDir/usr/share/applications/ontime.desktop
          sed -i 's/^Exec=ontime/Exec=ontime %F/' AppDir/usr/share/applications/ontime.desktop
      
      - name: Install libfuse2
        run: sudo apt-get update && sudo apt-get install -y libfuse2

      - name: Build AppImage
        run: |
          # Explicitly set architecture to x86_64 to fix the error
          ARCH=x86_64 VERSION=${{ needs.release-please.outputs.version }} ./appimagetool AppDir OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.AppImage

      - name: Generate SHA256 for AppImage
        run: |
          sha256sum OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.AppImage > linux.sha256

      - name: Upload SHA256 artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: linux-sha
          path: linux.sha256
        
      - name: Upload AppImage to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release-please.outputs.upload_url }}
          asset_path: ./OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.AppImage
          asset_name: OnTimeMeetingTimer-${{ needs.release-please.outputs.version }}.AppImage
          asset_content_type: application/octet-stream

  update-version-json:
    needs: [release-please, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download SHA256 artifacts
        uses: actions/download-artifact@v4
        with:
          path: sha256

      - name: Read SHA values
        id: sha
        run: |
          WIN_SHA=$(cut -d ' ' -f1 sha256/windows-sha/windows.sha256)
          MAC_SHA=$(cut -d ' ' -f1 sha256/macos-sha/macos.sha256)
          LINUX_SHA=$(cut -d ' ' -f1 sha256/linux-sha/linux.sha256)
          echo "win_sha=$WIN_SHA" >> $GITHUB_OUTPUT
          echo "mac_sha=$MAC_SHA" >> $GITHUB_OUTPUT
          echo "linux_sha=$LINUX_SHA" >> $GITHUB_OUTPUT
      
      - name: Generate version.json
        run: |
          VERSION_RAW="${{ needs.release-please.outputs.version }}"
          VERSION=$(echo "$VERSION_RAW" | sed 's/^timerV//;s/^v//')
          TODAY=$(date +"%Y-%m-%d")
          REPO="${GITHUB_REPOSITORY}"
          RELEASE_NOTES="${{needs.release-please.outputs.release_notes}}"
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="No release notes available."
          fi
          
          cat > version.json << EOF
          {
            "version": "${VERSION}",
            "releaseDate": "${TODAY}",
            "downloadUrl": {
              "windows": "https://github.com/${REPO}/releases/download/${VERSION_RAW}/OnTimeMeetingTimer-${VERSION}-setup.exe",
              "macos": "https://github.com/${REPO}/releases/download/${VERSION_RAW}/OnTimeMeetingTimer-${VERSION}.dmg",
              "linux": "https://github.com/${REPO}/releases/download/${VERSION_RAW}/OnTimeMeetingTimer-${VERSION}.AppImage"
            },
            "releaseNotes": ${RELEASE_NOTES@Q},
            "sha256": {
              "windows": "${{ steps.sha.outputs.win_sha }}",
              "macos": "${{ steps.sha.outputs.mac_sha }}",
              "linux": "${{ steps.sha.outputs.linux_sha }}"
            }
          }
          EOF
          
          cat version.json
      
      - name: Commit and push version.json
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add version.json
          git commit -m "Update version.json to ${{ needs.release-please.outputs.version }}" || echo "No changes to commit"
          git push origin main